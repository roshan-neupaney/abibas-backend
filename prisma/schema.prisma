// This is your Prisma schema file,

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MyUsers {
  id                  String              @id @default(uuid())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  hash                String          
  hashedRt            String?         
  email               String              @unique
  firstName           String?         
  lastName            String?         
  mobile              String?         
  status              Status              @default(ACTIVE)
  role                Role                @default(USER)
  favorite            Favorite[]
  image_name          String?
  cart                Cart[]
  order               Order[]
  interaction         Interaction[]
  rating              Rating[]
  review              Review[]
  @@map("myUsers")
}

model Interaction {
  id                  String              @id @default(uuid())
  user_id             String
  shoe_id             String
  action_type         String
  interaction_score   Float
  shoe                Shoe                @relation(fields: [shoe_id], references: [id])
  user                MyUsers             @relation(fields: [user_id], references: [id])
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt
}


model Cart {
  id                  String              @id @default(uuid())
  shoe_id             String
  user_id             String
  size                String
  color_variation_id  String
  count               Int                 @default(1)
  colorVariation      ColorVariation      @relation(fields:[color_variation_id], references:[id])
  user                MyUsers             @relation(fields:[user_id], references:[id])
  shoe                Shoe                @relation(fields: [shoe_id], references: [id])
  createdAt           DateTime            @default(now()) @map("created_at")
}

model Shoe {
  id                  String              @id @default(uuid())
  title               String
  slug_url            String              @default("") @unique
  brand_id            String
  price               String
  previous_price      String   
  description         String
  category_id         String              
  details             String              
  cart                Cart[]
  favorite            Favorite[]     
  status              Status              @default(PENDING)
  colorVariation      ColorVariation[]
  category            Category            @relation(fields:[category_id], references:[id])
  brand               Brand               @relation(fields:[brand_id], references:[id])
  interaction         Interaction[]
  rating              Rating[]
  review              Review[]
  orderItems          OrderItems[]
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt
}

model Category {
  id                  String              @id @default(uuid())
  title               String
  description         String
  shoe                Shoe[]
  status              Status              @default(PENDING)
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt
}

model ColorVariation {
  id                  String              @id @default(uuid())
  color               String[]            @default([])
  image_url           String 
  sizes               Size[]   
  shoe_id             String
  cart                Cart[]
  orderItems          OrderItems[]
  shoe                Shoe              @relation(fields:[shoe_id], references:[id], onDelete: Cascade)             
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt
}

model Color {
  id                  String              @id @default(uuid())
  title               String
  color_code          String
  status              Status              @default(PENDING)
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt
}

model Size {
  id                  String              @id @default(uuid())
  size                String
  stock               String              @default("1")
  color_variation_id  String              
  colorVariation      ColorVariation      @relation(fields:[color_variation_id], references:[id], onDelete: Cascade)  
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt
}

model Brand {
  id                  String              @id @default(uuid())
  title               String
  description         String
  image_name          String
  shoe                Shoe[]
  status              Status              @default(PENDING)
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt
}

model Favorite {
  id                  String              @id @default(uuid())
  shoe_id             String
  user_id             String              
  shoe                Shoe                @relation(fields:[shoe_id], references:[id])  
  user                MyUsers             @relation(fields:[user_id], references:[id])  
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt
}

model Rating {
  id                  String              @id @default(uuid())
  shoe_id             String
  user_id             String              
  rate                Float               @default(0)
  review              String?             @default("")
  short_review        String              @default("")
  shoe                Shoe                @relation(fields:[shoe_id], references:[id])  
  user                MyUsers             @relation(fields:[user_id], references:[id])  
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt
}
model Review {
  id                  String              @id @default(uuid())
  shoe_id             String
  user_id             String              
  review              String
  shoe                Shoe                @relation(fields:[shoe_id], references:[id])  
  user                MyUsers             @relation(fields:[user_id], references:[id])  
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt
}

model Order {
  id                  String              @id @default(uuid())
  firstName           String
  lastName            String
  province            String
  district            String
  municipality        String
  ward                String?
  phone               String
  user_id             String               
  total_amount        String
  tax_amount          String?
  user                MyUsers             @relation(fields:[user_id], references:[id])        
  status              OrderStatus         @default(PENDING)
  shipping_status     ShippingStatus      @default(PENDING)
  payment             Payment?   
  orderItems          OrderItems[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

}

model OrderItems {
  id                  String              @id @default(uuid())
  shoe_id             String
  order_id            String
  price              String
  size                String
  color_variation_id  String
  count               Int                 @default(1)
  colorVariation      ColorVariation      @relation(fields:[color_variation_id], references:[id])
  shoe                Shoe                @relation(fields: [shoe_id], references: [id])
  order               Order               @relation(fields: [order_id], references: [id])
  createdAt           DateTime            @default(now()) @map("created_at")
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

model Payment {
  id                  String              @id @default(uuid())
  orderId             String              @unique
  amount              String
  status              PaymentStatus       @default(PENDING)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  order               Order               @relation(fields: [orderId], references: [id])

}

model Province {
  id                  String                 @id @default(uuid())
  name                String
  areaSqKm            String
  website             String
  headquarter         String
  districts           District[]
}

model District {
  id                  String                 @id @default(uuid())
  provinceId          String
  name                String
  areaSqKm            String
  website             String
  headquarter         String
  province            Province            @relation(fields: [provinceId], references: [id])
  municipalities      Municipality[]
}

model Municipality {
  id                  String                 @id @default(uuid())
  districtId          String
  categoryId          Int
  name                String
  areaSqKm            String
  website             String
  wards               Int[]
  district            District            @relation(fields: [districtId], references: [id])
}

enum Status {
  PENDING
  ACTIVE
  DEACTIVATED
}
enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum Role {
  SUPERADMIN
  ADMIN
  PROVIDERADMIN
  PROVIDER
  USER
}


