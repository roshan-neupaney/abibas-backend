// This is your Prisma schema file,

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MyUsers {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hash        String
  hashedRt    String?
  email       String    @unique
  firstName   String?
  lastName    String?
  mobile      String?
  role        Role      @default(USER)
  favorite    Favorite[]
  videos      Videos[]
  image_name  String?
  cart        Cart[]
  order       Order[]
  @@map("myUsers")
}

model AnimalCategory {
  id          String    @id @default(uuid())
  title       String
  description String
  animals     Animal[]
}

model Animal {
  id                  String              @id @default(uuid())
  title               String
  description         String
  animal_category_id  String
  animalCategory      AnimalCategory      @relation(fields: [animal_category_id], references:[id])
  image_name          String?
}

model Cart {
  id                  String              @id @default(uuid())
  shoe_id             String
  user_id             String
  size                String
  color_variation_id  String
  count               Int                 @default(1)
  colorVariation      ColorVariation      @relation(fields:[color_variation_id], references:[id])
  user                MyUsers             @relation(fields:[user_id], references:[id])
  shoe                Shoe                @relation(fields: [shoe_id], references: [id])
}

model Shoe {
  id                  String              @id @default(uuid())
  title               String
  brand               String
  price               String
  description         String
  category            String
  details             Json                      
  cart                Cart[]
  order               Order[]         
  favorite            Favorite?     
  colorVariation      ColorVariation[]
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt
}

model ColorVariation {
  id                  String              @id @default(uuid())
  color               String
  image_url           String 
  sizes               Size[]   
  shoe_id             String
  cart                Cart[]
  shoe                Shoe              @relation(fields:[shoe_id], references:[id], onDelete: Cascade)             
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt
}

model Size {
  id                  String              @id @default(uuid())
  size                String
  stock               String              @default("1")
  color_variation_id  String              
  colorVariation      ColorVariation      @relation(fields:[color_variation_id], references:[id], onDelete: Cascade)  
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt
}

model Favorite {
  id                  String              @id @default(uuid())
  shoe_id             String              @unique
  user_id             String              
  shoe                Shoe                @relation(fields:[shoe_id], references:[id])  
  user                MyUsers             @relation(fields:[user_id], references:[id])  
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt
}

model Order {
  id                  String              @id @default(uuid())
  user_id             String               
  totalAmount         String
  shoe_id             String              
  user                MyUsers             @relation(fields:[user_id], references:[id])        
  shoe                Shoe                @relation(fields:[shoe_id], references:[id])        
  status              OrderStatus         @default(PENDING)
  payment             Payment?            
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

}
enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Payment {
  id                  String              @id @default(uuid())
  orderId             String              @unique
  amount              String
  status              PaymentStatus       @default(PENDING)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  order               Order               @relation(fields: [orderId], references: [id])

}
enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}




model Videos {
  id                  String              @id @default(uuid())
  title               String
  video_name          String
  user_id             String
  createdAt           DateTime            @default(now()) @map("created_at")
  user                MyUsers             @relation(fields: [user_id], references: [id])
}

enum Role {
  SUPERADMIN
  ADMIN
  PROVIDERADMIN
  PROVIDER
  USER
}


